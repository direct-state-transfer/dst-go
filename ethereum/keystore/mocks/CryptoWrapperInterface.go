// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/ethereum/go-ethereum/common"
import ecdsa "crypto/ecdsa"

import mock "github.com/stretchr/testify/mock"

// CryptoWrapperInterface is an autogenerated mock type for the CryptoWrapperInterface type
type CryptoWrapperInterface struct {
	mock.Mock
}

// FromECDSAPub provides a mock function with given fields: pub
func (_m *CryptoWrapperInterface) FromECDSAPub(pub *ecdsa.PublicKey) []byte {
	ret := _m.Called(pub)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*ecdsa.PublicKey) []byte); ok {
		r0 = rf(pub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Keccak256 provides a mock function with given fields: data
func (_m *CryptoWrapperInterface) Keccak256(data ...[]byte) []byte {
	_va := make([]interface{}, len(data))
	for _i := range data {
		_va[_i] = data[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(...[]byte) []byte); ok {
		r0 = rf(data...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// PubkeyToAddress provides a mock function with given fields: p
func (_m *CryptoWrapperInterface) PubkeyToAddress(p ecdsa.PublicKey) common.Address {
	ret := _m.Called(p)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(ecdsa.PublicKey) common.Address); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// SigToPub provides a mock function with given fields: hash, sig
func (_m *CryptoWrapperInterface) SigToPub(hash []byte, sig []byte) (*ecdsa.PublicKey, error) {
	ret := _m.Called(hash, sig)

	var r0 *ecdsa.PublicKey
	if rf, ok := ret.Get(0).(func([]byte, []byte) *ecdsa.PublicKey); ok {
		r0 = rf(hash, sig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(hash, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySignature provides a mock function with given fields: pubkey, hash, signature
func (_m *CryptoWrapperInterface) VerifySignature(pubkey []byte, hash []byte, signature []byte) bool {
	ret := _m.Called(pubkey, hash, signature)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) bool); ok {
		r0 = rf(pubkey, hash, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
